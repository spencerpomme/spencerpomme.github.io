<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>品森</title>
  <subtitle>一人的呓语</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://spencerpomme.github.io/"/>
<<<<<<< HEAD
  <updated>2016-04-16T08:42:29.000Z</updated>
=======
  <updated>2016-04-17T07:59:55.000Z</updated>
>>>>>>> origin/gh-pages
  <id>http://spencerpomme.github.io/</id>
  
  <author>
    <name>工常邵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
<<<<<<< HEAD
=======
    <title>c多文件编译的命令行方法（gcc）</title>
    <link href="http://spencerpomme.github.io/2016/04/17/c%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B9%E6%B3%95%EF%BC%88gcc%EF%BC%89/"/>
    <id>http://spencerpomme.github.io/2016/04/17/c多文件编译的命令行方法（gcc）/</id>
    <published>2016-04-17T07:27:07.000Z</published>
    <updated>2016-04-17T07:59:55.000Z</updated>
    
    <content type="html">&lt;p&gt;之前在学习数据结构的时候（现在还没有学完orz）发现，其实学习到后边的树、图之类的数据结构的时候，经常会用到stack和queue这两个更为基础的数据结构，需要经常性地包含它们的头文件。一直以来都直接用IDE来做这个事情，直到有一天觉得每次做题都要新建一个工程然后添加文件很麻烦，就决定把常用数据结构的.c和.h放在一个文件夹里，题目做完了就把problem.c放到这个文件夹里用命令行编译一下就得了。&lt;/p&gt;
&lt;p&gt;其实挺起来好像还是挺麻烦的，不过就当作是增添一项新经验也好。具体做法如下：（以stack.c和stack.h为例）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把需要一起变一的文件都放入一个directory里边去&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cmd/powershell(windows平台)进行如下操作：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;&amp;gt;&amp;gt;&amp;gt; gcc -std=c99 stack.c problem.c -o main&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样在文件夹里就会出现一个名为main.exe的文件了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前在学习数据结构的时候（现在还没有学完orz）发现，其实学习到后边的树、图之类的数据结构的时候，经常会用到stack和queue这两个更为基础的数据结构，需要经常性地包含它们的头文件。一直以来都直接用IDE来做这个事情，直到有一天觉得每次做题都要新建一个工程然后添加文件很
    
    </summary>
    
    
      <category term="gcc" scheme="http://spencerpomme.github.io/tags/gcc/"/>
    
  </entry>
  
  <entry>
>>>>>>> origin/gh-pages
    <title>testing</title>
    <link href="http://spencerpomme.github.io/2016/04/16/testing/"/>
    <id>http://spencerpomme.github.io/2016/04/16/testing/</id>
    <published>2016-04-16T08:41:54.000Z</published>
    <updated>2016-04-16T08:42:29.000Z</updated>
    
    <content type="html">&lt;p&gt;It’s a test.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;It’s a test.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
